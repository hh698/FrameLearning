<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--声明组件扫描器-->
    <context:component-scan base-package="com.hfq.controller"/>

    <!--视图解析器,帮助开发人员设置视图文件的路径-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀，视图文件的路径-->
        <property name="prefix" value="/WEB-INF/view/"/>
        <!--视图文件的扩展名-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--第一种处理静态资源的方式-->
<!--    <mvc:default-servlet-handler/>和@RequesrMapping注解有冲突，需要加入<mvc:annotation-driven/>解决问题&ndash;&gt;-->
<!--    <mvc:annotation-driven/>-->

<!--    第一种处理静态资源的方式：-->
<!--    需要在spring.xml配置文件中加入<mvc:default-servlet-handler>-->
<!--    原理是：加入这个标签后，框架会创建控制器对象DefaultServletHttpRequestHandler  (类似自己创建的MyController)-->
<!--    这个对象可以把接收到的请求转发给tomcat中的default 这个servlet-->
<!--    <mvc:default-servlet-handler/>-->

    <!--第二种处理静态资源的方式-->
    <!--
    <mvc:resources mapping="" location=""/>加入后框架会创建ResourceHttpRequestHandler这个处理器对象
     让这个对象去处理静态资源的访问，不依赖tomcat服务器
     mapping：访问静态资源的uri地址，使用通配符**
     location:静态资源在你项目中的目录位置
    -->
<!--    <mvc:resources mapping="/images/**" location="/images/"/>-->
<!--    <mvc:resources mapping="/html/**" location="/html/"/>-->
    <!--    <mvc:resources mapping="/js/**" location="/js/"/>-->
    <mvc:default-servlet-handler/>

    <!--使用一个语句，实现多个静态资源的访问-->
    <mvc:resources mapping="/static/**" location="/static/"/>
</beans>
