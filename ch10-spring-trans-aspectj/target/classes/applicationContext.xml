<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--数据库的配置信息-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--声明数据源Datasource,作用是连接数据库     **数据源-->
    <bean   id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--set注入给DruidDataSource提供连接数据库的信息-->
        <property name="url" value="${jdbc.url}?useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive"  value="${jdbc.maxActive}"/>
    </bean>

    <!--声明mybatis中提供的sqlSessionFactoryBean类，该类中创建sqlSessionFactory    **sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库的连接池赋给了dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
        <!--mybatis主配值文件的位置
        configLocation的属性是Resource类型,读取配置文件
        使用value指定文件路径，使用classpath表示文件位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--创建dao对象，使用sqlSession的getMapper(StudentDao.class)        **dao
    MapperScannerConfigurer在内部调用getMapper()生成每个dao接口的代理对象
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定sqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定dao接口所在的包名
        MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行一次getMapper()方法
        到的每个接口的dao对象,将创建好的dao对象放入到容器中. dao对象默认名称是 接口名（首字母小写）
        -->
        <property name="basePackage" value="com.hfq.dao"/>
    </bean>

    <!--声明service-->
    <bean   id="buyService" class="com.hfq.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>
    </bean>

    <!--声明式事务处理:和源代码完全分离-->
    <!--1.声明事务管理器-->
    <bean id="TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--2.声明业务方法它的事务属性(隔离级别，传播行为，超时时间)
    id:自定义名称，表示<tx:advice>中的配置内容
    transaction-manager事务管理器对象的id
    -->
    <tx:advice  id="myAdvice" transaction-manager="TransactionManager">
        <!--tx:attributes 配置事务属性-->
        <tx:attributes>
            <!--tx:method 给具体的方法配置事务属性,method可以有多个，分别给不同的方法设置事务属性
            name:方法名称
                    1）完整的方法名称，不带有包和类
                    2)方法可以使用通配符，*表示任意字符
            propagation:传播行为，枚举值
            isolation:隔离级别
            rollback-for:自定义的异常类名 ，是全限定类名. 发生异常，一定回滚
            -->
            <tx:method name="buy"  propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException,com.hfq.excep.NotEnoughException"/>
        </tx:attributes>
    </tx:advice>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式
        id:切入点表达式的名称，唯一值
        expression:切入点表达式，指定哪些类使用事务,aspectj会创建代理对象
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器:关联advice和pointcut
        advice-ref:通知，tx:advice中的配置
        pointcut-ref:切入点表达式的id
        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>